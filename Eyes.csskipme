using UnityEngine;
using System.Collections;
using System.Collections.Generic;
//using UnityEditor;
using System.Text.RegularExpressions;

[System.Serializable]
public class GUIState
{
	public GameState state;
	public Transform bucket;

}

public class Eyes : MonoBehaviour {
	public Component[] labels;
	public Component[] buttons;
	public Component[] meters;
//	private List<GameObject> toy_select = new List<GameObject>();
	public Camera cam;
	public List<Transform> cameras;
	private Vector3 lookat = new Vector3(0,0,0);


	public GameState state;
	public bool menu;

	float default_text_size = 70f;
	float w_to_h;
	float button_height;

	public Peripheral peripheral;
	public Central central;

	GameObject infobox; //current infobox, if any

	public float camera_size = 1;
	public Vector3 camera_scale = new Vector3(1,1,1);
	public Vector3 camera_position;
	public Vector3 camera_rotation;
	public float x_coord;
	public float y_coord;
	Transform ingame_toy_grid_transform;

	Transform junk_transform;
	public static Eyes Instance { get; private set; }
	// Use this for initialization

	public List<GUIState> GUI_states = new List<GUIState> ();






	//InGame, Inventory, Won, Lost, MainMenu, Null, WonGame

	void Start(){


		junk_transform = (GameObject.Find ("Junk")).transform;
		peripheral = (GameObject.Find ("Peripheral")).gameObject.GetComponentInParent<Peripheral>();

		GameAction.onInfoBoxRequest += onInfoBoxRequest;
		if (Instance != null && Instance != this) {
						Destroy (gameObject);
				}
		Instance = this;
		central = Central.Instance;
		cameras.Add(GameObject.Find("Camera").transform);
	//	cameras.Add(GameObject.Find("Perspective").transform);

		camera_size = Central.Instance.camera_size;
		camera_scale = Central.Instance.camera_scale;
		camera_rotation = Central.Instance.camera_rotation;
		camera_position = Central.Instance.camera_position;

		x_coord = Screen.width;
		y_coord = Screen.height;

	//	DontDestroyOnLoad (gameObject);
		UICamera.genericEventHandler = this.gameObject;
	//	PlaceCamera (10, 10, 10f);
		Debug.Log ("Eyes start\n");
		PlaceState (GameState.MainMenu);
		//PlaceMenu (true);

		}
	// Update is called once per frame


	void Update () {
		//Debug.Log (Central.Instance.state);
		//Camera.main.transform.LookAt(lookat);

		switch (state) {
		case GameState.InGame:
			UpdateInGame();
			break;
		case GameState.Inventory:
			//UpdateInventory();
			break;
		default:
			break;
		}


	//	Debug.Log (Vector3.Angle(transform.forward, Camera.main.transform.forward));
		}

	Vector3 endpoint(){
		//Vector3 endpoint = (Camera.main.transform.position + Camera.main.transform.forward * gui_distance);
		Vector3 endpoint = Vector3.forward * 1000;
		return endpoint;
		}

	public enum MenuButton{Start, Continue, Settings, Restart, Inventory, Quit, ToMainMenu,Resume};

	void PlaceButtons(string state, bool bg, List<MenuButton> buttons){
		int i = buttons.Count;
		float max =.8f;
		float range = max * 2;
		float segments = i + 1;
		float segment_height = range / segments;
		float spacing = button_height;
		float start_pos = -max;
		button_height = .1f;//f - (2f * camera_size)/(Map.Instance.size_z * Peripheral.Instance.tileSize) ;



		if (bg) {
			PlaceElement ("GUI/mainmenu_bg", state, 0, 0, 0f, 1, 1,true);
		}
		foreach (MenuButton b in buttons){
			switch (b){
			case MenuButton.Start:
				PlaceElement ("GUI/mainmenu_start_game", state, 0, start_pos + i *segment_height, 1f, button_height*4, button_height, false);
				i--;
				break;
			case MenuButton.Continue:
				if (Central.Instance.getSaveGameFile() != null){
					PlaceElement ("GUI/mainmenu_continue",state, 0, start_pos + i *segment_height, 1f, button_height*4, button_height, false);
					i--;
				}
				break;
			case MenuButton.Resume:
					PlaceElement ("GUI/mainmenu_continue",state, 0, start_pos + i *segment_height, 1f, button_height*4, button_height, false);
					i--;		
				break;
			case MenuButton.Restart:
				PlaceElement ("GUI/mainmenu_restart", state, 0, start_pos + i *segment_height, 1f, button_height*4, button_height, false);				
				i--;
				break;
			case MenuButton.Inventory:
				PlaceElement ("GUI/ingame_inventory", state, 0, start_pos + i *segment_height, 1f, button_height*4, button_height, false);
				i--;
				break;
			case MenuButton.Quit:
				PlaceElement ("GUI/mainmenu_quit", state, 0, start_pos + i *segment_height, 1f, button_height*4, button_height, false);
				i--;
				break;
			case MenuButton.ToMainMenu:
				PlaceElement ("GUI/mainmenu_tomainmenu", state, 0, start_pos + i *segment_height, 1f, button_height*4, button_height, false);
				i--;
				break;	
			}

		}

	}

	public void SetEnableButtons(string include, string exclude, bool enable){
		Debug.Log ("setting buttons that include " + include + " or exclude " + exclude + " to enabled " + enable);
		foreach (Button b in buttons) {
			if (b.parent == null) continue;
			if (include != null)
				if (b.parent.name.Contains(include)) b.setEnabled(enable);

			if (exclude != null)
				if (!b.parent.name.Contains(exclude)) b.setEnabled(enable);
		}
	}


	////////////////////////////////// PLACE INVENTORY
	void PlaceInventory(){
		PlaceElement ("GUI/inventory_bg", "Inventory", 0, 0, 1f, 1f, 1f,true);
		PlaceElement ("GUI/mainmenu_restart", "Inventory", 0, -0.8f, 0f, 0.8f, 0.2f, false);

		GameObject points = PlaceElement ("GUI/generic_text", "Inventory", -0.9f, 0.8f, 0f, 0.2f, 0.2f, false);
		points.name = "points";
		Transform mid = points.transform.Find ("generic_text_panel");
		Transform points_label = mid.transform.Find ("generic_text_label");
		points_label.name = "points_count";
		points_label.GetComponent<UILabel> ().text = Central.Instance.points.ToString();

		GameObject scroll = PlaceElement ("GUI/Scroll/inventory_scroll", "Inventory", 0, 0.2f, 0f, 0.8f, 0.8f, false);

		UIGrid grid = scroll.GetComponentInChildren<UIGrid> ();
		UIPanel clip_panel = scroll.GetComponentInChildren<UIPanel> ();
		UIDraggablePanel drag_panel = scroll.GetComponentInChildren<UIDraggablePanel> ();

	
		Vector2 scale = new Vector2 (clip_panel.clipRange.w/5f, clip_panel.clipRange.z/5f);
		//clip_panel.clipRange = new Vector4 (0, 0, clip_panel.clipRange.z, clip_panel.clipRange.w);// center is being set to not zero by some NGUI script
		grid.cellWidth = scale.x*5;
		grid.cellHeight = scale.y;
		int count = 0;

		foreach (KeyValuePair<string,int> kvp in Inventory.Instance.count) {
	//		Debug.Log("Should we place " + kvp.Key + "?\n");
			if (Central.Instance.actors[kvp.Key].ammo != -1){continue;}
			count++;
				GameObject select = AddScrollableElement("GUI/Scroll/inventory_toy_select", kvp.Key, grid, drag_panel);			
				select.transform.localScale = scale;
				Button button = select.GetComponent<Button>();
				button.content = kvp.Key;
				button.type = "Inventory";
			select.GetComponent<BoxCollider>().center = new Vector3(1,0,0);

				Transform bg = select.transform.FindChild 	("inventory_toy_texture"); //just texture, level 2
				UITexture tex_obj = bg.GetComponent<UITexture>();
				LoadGUITexture(tex_obj, "Unlit/Transparent Colored", kvp.Key + "_button");
				tex_obj.transform.localPosition = new Vector3(1,0,0);
				tex_obj.transform.localScale = new Vector3(1,1,1);

				Transform label_obj = select.transform.FindChild ("inventory_toy_label"); //level 2
				label_obj.name = kvp.Key + "_count";
				label_obj.transform.localScale = new Vector3(1,1,1);
				label_obj.transform.localPosition = new Vector3(0,0,0);
				LoadScrollableLabel(label_obj, kvp.Value.ToString());

			Transform info_obj = select.transform.FindChild ("inventory_toy_info"); //level 2

			info_obj.name = kvp.Key + "_title";
			info_obj.transform.localScale = new Vector3(0.5f,0.5f,1);
			info_obj.transform.localPosition = new Vector3(2.5f,0,0);
			LoadScrollableLabel(info_obj, Central.Instance.actors[kvp.Key].info.title);
			info_obj.GetComponent<UILabel>().lineWidth = 2;
		}
		Transform child = scroll.transform.GetChild(0); //level 1
		Debug.Log ("Adjusting position by " + clip_panel.clipRange);
		
		child.transform.localPosition = child.transform.localPosition + new Vector3 (-(grid.cellHeight*count/2f-clip_panel.clipSoftness.x), grid.cellHeight*count/2f-clip_panel.clipSoftness.x, 0);

		getLabels ();
	}


	void PlaceInGameButtons(){
		//Debug.Log ("Ingame buttons");
		int max_capacity = 0;
		foreach (string toy in peripheral.haveToys) {
			if (Central.Instance.actors [toy].ammo != -1)			continue;
			max_capacity++;
		}
	//	Debug.Log ("max capacity is " + max_capacity);
		GameObject scroll = PlaceElement ("GUI/Scroll/ingame_toy_scroll", "InGame", -1f, 0, 0f, 0.1f, 0.1f, true);
		
		UIGrid grid = scroll.GetComponentInChildren<UIGrid> ();
		UIPanel clip_panel = scroll.GetComponentInChildren<UIPanel> ();
		UIDraggablePanel drag_panel = scroll.GetComponentInChildren<UIDraggablePanel> ();

		Vector2 scale = new Vector2 (clip_panel.clipRange.w, clip_panel.clipRange.w);
		grid.cellWidth = scale.x;
		grid.cellHeight = scale.y;		
		int count = 0;

		Transform panel = scroll.transform.GetChild (0);

		foreach (string toy in peripheral.haveToys) {
			if (Central.Instance.actors[toy].ammo != -1) continue;
		//	Debug.Log("Wanna place button for " + toy);
			
			GameObject select = AddScrollableElement("GUI/Scroll/ingame_toy_select", toy + "_toy_select", grid, drag_panel);
			
			Transform child = select.transform.GetChild(0); //level 1
			child.transform.localScale = scale;
			Button button = child.GetComponentInChildren<Button>();
			button.content = toy;
			button.type = "toy_selected";

			//don't think this is n ecessary anymore
			button.order = count;
			count++;

			//from here on, all the scales and positions are grid based, 1 = 1 cell
			
			Transform bg = child.transform.FindChild 	("ingame_toy_texture"); //just texture, level 2
			UITexture tex_obj = bg.GetComponent<UITexture>();
			LoadGUITexture(tex_obj, "Particles/Alpha Blended", toy + "_button");
			tex_obj.transform.localPosition = new Vector3(0,0,0);
			tex_obj.transform.localScale = new Vector3(1,1,1);
			//Debug.Log("Inventory " + Inventory.Instance.getCount(toy) + " cost " + Central.Instance.actors[toy].cost[0] + " points " + Central.Instance.points);
			if (Central.Instance.actors[toy].cost > peripheral.getDreams())
			{	Debug.Log("Setting " + toy + " inactive " + Central.Instance.actors[toy].cost + " " + peripheral.getDreams());
				select.SetActive(false);} 
		//	select.GetComponentInChildren<Tweener>().InitUITexOriginalColor();??!?!?!?
		}
		getLabels ();
		ingame_toy_grid_transform = GameObject.Find ("ingame_toy_grid").gameObject.transform;
	}

	void PlaceInGameMeters(){

		float max_capacity = System.Enum.GetValues (typeof(EffectType)).Length -1;
	//	Debug.Log ("CAPACITY FOR METERS IS " + max_capacity);
		GameObject scroll = PlaceElement ("GUI/Meter/ingame_meter_scroll", "InGame", 1f, 0f, 0f, 0.1f, 0.1f, false);
	
		UIGrid grid = scroll.GetComponentInChildren<UIGrid> ();
		UIPanel clip_panel = scroll.GetComponentInChildren<UIPanel> ();
		UIDraggablePanel drag_panel = scroll.GetComponentInChildren<UIDraggablePanel> ();
	
		Vector2 scale = new Vector2 (clip_panel.clipRange.w, clip_panel.clipRange.w);
		grid.cellWidth = scale.x;
		grid.cellHeight = scale.y;		
		int count = 0;
	
		Transform panel = scroll.transform.GetChild (0);
	
		foreach (EffectType type in System.Enum.GetValues(typeof(EffectType))) {
			if (type == EffectType.Null || type == EffectType.God){continue;}
			string type_name = type.ToString().ToLower();
			GameObject select = AddScrollableElement("GUI/Meter/ingame_effect_meter_select", type_name + "_effect_meter_select", grid, drag_panel);
			peripheral.InitEffectMeter(type, select);

			Transform child = select.transform.GetChild(0); //level 1  ingame_effect_button
			child.transform.localScale = scale;
			Button button = child.GetComponentInChildren<Button>();
			button.content = type_name;
			button.type = "meter_selected";
		
			//from here on, all the scales and positions are grid based, 1 = 1 cell

			Transform lvl2 = child.transform.FindChild 	("effect_status"); //level 2
			lvl2.transform.localPosition = Vector3.zero;
			Transform bg = lvl2.transform.FindChild ("scaleme"); //level 2
			bg = bg.transform.FindChild 	("center"); //level 2
			UITexture tex_obj = bg.GetComponent<UITexture>();

			 
			LoadGUITexture(tex_obj, "Particles/Alpha Blended", "soft_circle",Get.EffectColor(type));
			tex_obj.transform.localPosition = new Vector3(0,0,0);
			//tex_obj.transform.localScale = new Vector3(1,1,1);
			tex_obj.transform.localScale = tex_obj.transform.localScale/100;
			bg.transform.localScale = Vector3.one;


			lvl2 = child.transform.FindChild 	("effect_rings"); //the CENTERRRR, level 2
			lvl2.transform.localPosition = Vector3.zero;

			foreach (Transform me in lvl2.transform){
				tex_obj = me.gameObject.GetComponent<UITexture>();
				tex_obj.transform.localPosition = new Vector3(0,0,0);
				tex_obj.transform.localScale = tex_obj.transform.localScale/100;
			}


			if (peripheral.effects[type].strength <= 0){select.SetActive(false);}
	}
	getLabels ();		

	}

	//
	public GameObject AddScrollableElement(string top_level, string name, UIGrid grid, UIDraggablePanel drag_panel){
		GameObject select = (GameObject)Instantiate (Resources.Load (top_level)); //level 0
		select.name = name;
		select.transform.parent = grid.transform;
	//	Debug.Log ("scrollable element " + select.name + " position is " + select.transform.localPosition + "\n");
		select.GetComponent<UIDragPanelContents> ().draggablePanel = drag_panel;
		Vector3 pos = select.transform.localPosition;
		pos.Set (pos.x, pos.y, -1);
		select.transform.localPosition = pos;
		select.transform.localScale = Vector3.one;
		select.transform.localRotation = Quaternion.identity;
		select.GetComponentInChildren<BoxCollider> ().size = new Vector3(1,1,1);
		return select;
	}

	public void LoadScrollableLabel(Transform label_obj, string text){
		UILabel label = label_obj.GetComponent<UILabel>();
		label.text = text;
		label.lineHeight = 1;
		label.lineWidth = 1;
		label.effectStyle = UILabel.Effect.Outline;
		label.maxLineCount = 1;
		}


	public void LoadGUITexture (UITexture tex_obj, string type, string name){	
		Color color = Color.white;
		LoadGUITexture (tex_obj, type, name, color);
	}

	public void LoadGUITexture (UITexture tex_obj, string type, string name, Color color){
		Material la = new Material(Shader.Find (type));
		Texture2D tex = (Texture2D) Resources.Load("Surfaces/GUI/" + name, typeof(Texture2D));
		la.SetTexture("_MainTex", tex);
	//	Debug.Log ("Setting color to " + color);
		la.SetColor ("_TintColor", color);
		tex_obj.material = la;
	}

	public void UpdateInventory(){
		foreach (UILabel l in labels) {
		//	Debug.Log("Updating inventory label " + l.name + "\n");
			switch(l.name){
				case"points_count":
					l.text = Central.Instance.points.ToString();
					break;
				default:
					Match match = Regex.Match (l.name, @"([A-Za-z0-9_]+)_count$");
					if (match.Success) {
				//	Debug.Log("matched " + match.Groups[1] );
					l.text = Inventory.Instance.getCount(match.Groups[1].ToString()).ToString();
					}	
					break;
					
				}
		}
	}



	void UpdateInGame(){
		float dreams = peripheral.getDreams ();
		foreach (UILabel l in labels){
			if (l == null) continue;
			switch (l.name)
			{
			case "ingame_points_status":
				l.text = (peripheral.health).ToString();
				break;
			case "ingame_dreams_status":
				l.text = (dreams.ToString());
				break;
			case "ingame_time_status":
				l.text = (peripheral.TIME).ToString();
				break;

			default:
				break;
			}
		}
		foreach (Meter l in meters){
	
			switch (l.name)
			{
			case "ingame_dreams_meter":
				l.UpdateMeter(dreams/(float)Peripheral.Instance.max_dreams);
				break;
			case "force_effect_meter_select":
				break;
			case "scale_effect_meter_select":
				break;
			case "speed_effect_meter_select":

				break;
			default:
				break;
			}
		}
	}
	

	public void UpdateToyButtons(string mytoy){
		float dreams = peripheral.getDreams();
		foreach (string name in Peripheral.Instance.haveToys) {
			if (Central.Instance.actors [name].cost > dreams) {
				//Debug.Log(mytoy + " too expensive!!! " + Central.Instance.actors [name].cost + " > " +  dreams);
				ClearInfo();
				SetRowButton ( name, "toy_select", false, false);
				if (mytoy.Equals(name)){
					Central.Instance.button_selected = null;// is this used??!!
				}


			}else{
			//	Debug.Log("button " + name + " toy_selected " + Peripheral.Instance.getSelectedToy());
				if (Peripheral.Instance.getSelectedToy() == name){

					SetRowButton ( name, "toy_select", true, true);
				}else{
					SetRowButton ( name, "toy_select", true, false);
				}
			}
		}

	}


	Transform getState(GameState s){
		Transform r = null;
		for (int i = 0; i < GUI_states.Count; i++) {
			if (GUI_states[i].state == s){ r = GUI_states[i].bucket;}
		}
		return r;
	}


	public void SetRowButton(string match, string kind, bool active, bool selected){



		Transform[] keys = new Transform[ingame_toy_grid_transform.childCount];	
		foreach (Transform child in ingame_toy_grid_transform) {
				Match findme = Regex.Match (child.name, match);
				if (findme.Success) {
				//Debug.Log("Clearing button " + child.name);
					if (child.gameObject.active){child.GetComponentInChildren<Button>().setSelected(selected);}
					child.gameObject.active = active;		
				}
		}
		ingame_toy_grid_transform.gameObject.GetComponent<UIGrid> ().repositionNow = true;
		getLabels ();
	}


	public void RepositionGrid(string grid){
		GameObject parent = GameObject.Find (grid);
		parent.GetComponent<UIGrid> ().repositionNow = true;
		getLabels ();
	}


	//clear gui for all but the given state, duh
	public void ClearGUI(GameState state, bool menu){

		Debug.Log ("Clearing GUI for " + state + " menu " + menu);
		GameObject parent = GameObject.Find ("Camera");
		foreach (Transform child in parent.transform) {

			if (!child.name.Equals(state.ToString()) && !child.name.Equals(menu)){
          //      Debug.Log("Clearing gui for " + child.name);
				while(child.transform.GetChildCount()>0){
					child.transform.GetChild (0).transform.parent = junk_transform;
				//	child.transform.GetChild (0).gameObject.SetActive(false);
				}/*
				foreach (Transform leaf in child.transform){
					Debug.Log("Clearing " + leaf.name + " from " + child.name);
					Destroy(GameObject.Find (leaf.name));
				}*/

			}
		}
		getLabels ();
	}

	public void ClearGUI(GameState s)	{
		if (s == GameState.Null) {
			s = state;
		}

		ClearGUI(s, menu);
	}
	public void PlaceState(GameState s){
		Debug.Log ("Eyes placing state " + s);

		state = s;
		switch (state) {
		case GameState.InGame:
			getLabels ();
			ClearGUI(GameState.InGame);
		//	PlaceCamera(Map.Instance.size_x, Map.Instance.size_z,Peripheral.Instance.tileSize);
			PlaceInGameGUI();

			break;
		case GameState.Lost:

	//		Debug.Log("Placing Lost menu\n");
			ClearGUI(GameState.Lost);
			menu = true;
			PlaceMenu (true);
			break;
		case GameState.Inventory:
			
	//		Debug.Log("Placing Inventory");
			ClearGUI(GameState.Inventory);		
			PlaceInventory();
			break;
		case GameState.MainMenu:
			PlaceMenu (true);
			break;
		default:
			break;
		}
	}
//	bool bg, bool start, bool b_continue, bool settings, bool restart, bool inventory){
	public void PlaceMenu(bool m){
		menu = m;
		switch (menu) {
		case true:
			List<MenuButton> list = new List<MenuButton>();
			if (state == GameState.InGame){
				Debug.Log("Placing IN GAME Main menu");
				list.Add(MenuButton.Start);list.Add(MenuButton.Resume);list.Add(MenuButton.ToMainMenu);
				PlaceButtons("MainMenu",false, list);
				Peripheral.Instance.Pause();
			}else if (state == GameState.Lost){
				Debug.Log("Placing LOST Main menu");
				list.Add(MenuButton.Restart);list.Add(MenuButton.Quit);
				PlaceButtons("MainMenu", true, list);
			}else{
				//very very intro screen before game starts
				Debug.Log("Placing IN VERY VERY Intro screen Main menu");
				list.Add(MenuButton.Continue);list.Add(MenuButton.Start);
				PlaceButtons("MainMenu", true, list);
			}
			break;
		case false:
			ClearGUI(GameState.Null);
			if (state.Equals("InGame")){
				Peripheral.Instance.Play();
			}
			break;
		default:
			break;
		}
	}

	public void WaveButton(){
		//if (Peripheral.Instance.next_wave > 0) {
		PlaceElement("GUI/ingame_wave_start", "InGame", 0, 0,0f, 0.1f, 0.1f,false);
	}
	
	//size is in tiles
	public GameObject PlaceSignal(string what, Vector3 pos, float size){
		string parent = "Camera";
		float z = 5f;		
		float tilesize = Peripheral.Instance.tileSize;
		float sizex = size/tilesize;
		float sizey = size/tilesize;

	//	Debug.Log ("size is " + sizex);
		//float sizex = size*tilesize / y_coord;
		//float sizey = size*tilesize / y_coord;
	
		//pos.x = (pos.x - Screen.width / 2) / (Screen.width/2);
		//pos.y = (pos.y - Screen.height / 2) / (Screen.height/2);
//		Debug.Log ("X " + sizex + " Y " + sizey + "\n");
		Vector2 loc = Get.CoordFromMouseInput (pos);
		bool stretch = false;
        bool fit = false;


        return PlaceElement(what, parent, loc.x, loc.y, z, sizex, sizey, stretch, fit, "", 0);
	}

	public void StopSignal(){
			Eyes.Instance.PlaceSignal("GUI/Signal/ingame_stop_signal", Input.mousePosition);
		}
	

	public GameObject PlaceSignal(string what, Vector3 pos){
			float size = 1f;
			return PlaceSignal(what, pos, size);
	}

	GameObject PlaceGenericButton(string texture, string content, string type, string parent,float x, float y, float sizex, float sizey, bool stretch){
		GameObject button = PlaceElement ("GUI/generic_button", parent, x, y, 0, sizex, sizey, stretch);
		button.name = content.ToLower ();
		Color color = Color.white;
		LoadGUITexture (button.GetComponentInChildren<UITexture> (), "Unlit/Transparent", texture, color);
		button.GetComponentInChildren<UITexture> ().depth = 1;
		button.GetComponentInChildren<Button> ().type = type;
		button.GetComponentInChildren<Button> ().content = content;
		return button;

	}

	Vector2 Coord(Transform parent){

		if (parent == null)return new Vector2 (x_coord, y_coord);
		//Debug.Log ("coord for " + parent.name);
		Vector3 parentScale = parent.localScale;


		if (parentScale.Equals (Vector3.one)) 
		{//	Debug.Log("one (" + x_coord + " " + y_coord + " FOR " + parent.name + "\n");
			return new Vector2 (x_coord, y_coord);
		} else 
		{
	//	Debug.Log("COORD ParentScale is " + parentScale + " and coords are " + x_coord + " " + y_coord);
			Vector3 scale = GUIScale (null, 1,1,false);
		//	Debug.Log("COORD scale is " + scale);
			scale.Set(parentScale.x/scale.x, parentScale.y/scale.y,scale.z);
		//	Debug.Log("COORD scale is " + scale);
			scale.Set(scale.x*x_coord,scale.y*y_coord,scale.z);
		//	Debug.Log("COORD scale is " + scale);
			return new Vector2(scale.x, scale.y);
		}

					
	}

	GameObject PlaceElement(string what, string parent,float x, float y,float z, float sizex, float sizey, bool stretch){
		return PlaceElement(what, parent, x, y, z, sizex, sizey, stretch, true,"",0);
	}

    Vector3 GUIPosition(Transform parent, float x, float y, float z, Vector3 mysize)
    {
        return GUIPosition(parent, x, y, z, mysize, true);
    }

	Vector3 GUIPosition(Transform parent, float x, float y, float z, Vector3 mysize, bool fit){
		Vector2 coord = Coord (parent);
		Vector2 def = Coord (null);

		if (coord != def) 
		{ 
			coord.x = Camera.main.orthographicSize;//*coord.x/def.x;
			coord.y = coord.x * Screen.height;//*coord.y/def.y;
		}
		float x_scale = 50f;
		float y_scale = 80f;
	//	Debug.Log ("coord " + coord + " x " + x + " y " + y);
	//	Vector3 position = new Vector3 (x * coord.x/2, y * coord.y/2, -z);
		Vector3 position = new Vector3 (x*x_scale, y*y_scale, -z);
	//	Debug.Log ( " unadjusted position is " + position);
        if (fit){
	//		Debug.Log("mysize.x " + mysize.x + " mysize.y " + mysize.y);
		    if (Mathf.Abs(position.x) + Mathf.Abs(mysize.x)  > x_scale && x!= 0) 
		    //    position.x = (coord.x/2 - mysize.x) * x / Mathf.Abs (x);		
				position.x = (x_scale - mysize.x) * x / Mathf.Abs (x);		
		    if (Mathf.Abs(position.y) + Mathf.Abs(mysize.y) > y_scale && y != 0 )
		        position.y = (y_scale - mysize.y) * y / Mathf.Abs (y);
        }
	//	Debug.Log (" final position is " + position);
		return position;
	}

	//TRANSFORM.LOCALSCALE of gui element
	Vector3 GUIScale(Transform parent, float sizex, float sizey, bool stretch){
		Vector2 coord = Coord (parent);
		float min = Mathf.Min (Screen.width, Screen.height);
		float default_x = min;
		float default_y = min;
		Vector3 scale;
	//	Debug.Log ("Min is " + min);
		if (coord != Coord (null)) {
			//return Vector3.one;
			return new Vector3(sizex, sizey,0);
		}
		
		if(stretch)
			scale = new Vector3 (sizex*(coord.x)/(default_x), sizey*(coord.y)/(default_y), 0);
		else
			scale = new Vector3 (sizex*(coord.y)/(default_x), sizey*(coord.y)/(default_y), 0);
	//	Debug.Log ("Parent " + parent.name + " coord is " + coord + " Gui scale from " + sizex + " " + sizey + " to " + scale + "\n");
		return scale;

		/*
		Vector2 coord = Coord (parent);
		float default_x = 100;
		float default_y = 100;
		Vector3 scale;

		if (coord != Coord (null)) {
			//return Vector3.one;
			return new Vector3(sizex, sizey,0);
				}

		if(stretch)
			scale = new Vector3 (sizex*(coord.x)/(default_x), sizey*(coord.y)/(default_y), 0);
		else
			scale = new Vector3 (sizex*(coord.y)/(default_x), sizey*(coord.y)/(default_y), 0);

		return scale;*/
	}


	//THIS IS ONLY USED FOR GUIPOSITION (ALMOST)
	Vector3 GUISize(Vector3 scale){
		float default_x = 100;
		float default_y = 100;
		
		return new Vector3 (scale.x*default_x/2f, scale.y*default_y/2f, 0);//this is half the size of the object

	}
	public GameObject PlaceRangeSphere(string what, Transform parent, float size){
		GameObject select = (GameObject)Instantiate(Resources.Load(what));
		select.transform.parent = parent;
		select.transform.position = parent.position;
		select.transform.localScale = new Vector3 (size, size, size);
		return select;
	}
		//"GUI/range_sphere", this.transform.position, range);

	GameObject LoadElement(string what, string parent){
		GameObject select = (GameObject)Instantiate(Resources.Load(what));
		string[] name = what.Split('/');
		select.name = name[name.GetLength(0)-1];
		Transform p = GameObject.Find (parent).transform;
		select.transform.parent = p;

		if (Coord (p) != Coord (null)) 
		{  //ie the parent is an infobox
			select.transform.localPosition = Vector3.zero;
			select.transform.localScale = Vector3.one;
		} else {
			select.transform.localPosition = endpoint () + select.transform.position;
		}
						

		
		select.transform.localEulerAngles = new Vector3 (0, 0, 0);

		return select;
	}

	//-1, 1         1, 1
	//         0 
	//-1,-1         1,-1
	//sizex = % of how big the element should be 0 to 1
	//x     = location 0 to 1
	GameObject PlaceElement(string what, string parent,float x, float y,float z, float sizex, float sizey, bool stretch, bool fit, string text, float text_size){
		GameObject select = LoadElement (what, parent);

		if (select.GetComponentInChildren<Button> ())
			select.GetComponentInChildren<Button> ().type = parent;
	
		select.transform.localEulerAngles = new Vector3 (0, 0, 0);
		Transform p = GameObject.Find (parent).transform;
	//	Debug.Log("PLACING ELEMENT " + what + "\n");
		foreach (Transform panel in select.transform) {
			if (panel.GetComponent<UIPanel> () != null) {
				//float default_x = 100;
				float default_y = 100;

				Vector3  scale = GUIScale(p, sizex, sizey, stretch);
			//	Debug.Log("what " +what + " scale is " + scale);
				Vector3  mysize = GUISize(scale);
			//	Debug.Log("what " + what + " mysize " + mysize + "\n");
					
					if (panel.GetComponent<UIPanel>().clipping == UIDrawCall.Clipping.None){
						panel.localScale = scale; 

					}else{
						Vector4 clipRange = panel.GetComponent<UIPanel>().clipRange;
						panel.GetComponent<UIPanel>().clipRange = new Vector4(0,0,scale.x*clipRange.z, scale.y*clipRange.w);
						panel.GetComponent<UIPanel>().clipSoftness = new Vector2(scale.x*clipRange.z/15f, scale.y*clipRange.w/15f);
					}

				if (panel.transform.GetComponentInChildren<UILabel>() != null) {
					UILabel label = panel.transform.GetComponentInChildren<UILabel>();
					if (!text.Equals(""))
						label.text = text;

					label.maxLineCount = 0;
					Vector2 me = Coord (p);
					Vector2 def = Coord (null);
					Vector2 factor =new Vector2(me.x/def.x, me.y/def.y);

					float char_per_line = 25f;
					label.lineWidth = 100;
					int lines = Mathf.CeilToInt((float)label.text.Length /char_per_line);

					GameObject label_obj = label.gameObject;	
					float line_height;

						line_height = 100f/lines;
						float char_width = Mathf.Min (line_height/4f, 10f);
					label.lineHeight = 0;

					Vector3 label_scale = new Vector3(char_width, line_height, 0f);					
					label_obj.transform.localScale = label_scale;	
		
					mysize.Set (panel.transform.localScale.x*label.lineWidth/2f, lines*label_scale.y*panel.transform.localScale.y/2f, mysize.z);
				}
								
			//	Debug.Log("what " + what + " mysize " + mysize + " x " + x + " y " + y + " z " + z + "\n");
				panel.localPosition = GUIPosition(p,x,y,z,mysize, fit);
			}
		}
		return select;
	}


	public void ClearInfo(){
		if (infobox != null) {
			DestroyObject (infobox);
			infobox = null;
		}
	}


	public void DisplayInfo(string type, string name){
		if (infobox != null && infobox.name.Equals("infobox_" + name)) return;
		ClearInfo ();


		switch(type){
		case "toy":
			infobox = DisplayToyInfo(name);
			break;
		default:
			break;
		}

	}

	public Tweener[] AddTweeners(GameObject obj){
	//	Debug.Log ("Going to add tweeners to " + obj.name);

		Tweener[] found = obj.GetComponentsInChildren<Tweener>();
		Tweener more = obj.GetComponent<Tweener>();
		Tweener[] all;
		if (more) {
		//	Debug.Log("Found a tweener on obj");
						all = new Tweener[found.Length + 1];
						all = found;
						all [all.Length - 1] = more;
		}else{ all = found;
		}
		if (all.Length > 0) {//Debug.Log("Found " + all.Length + " tweeners for " + obj.name);
						return all;
				}

		UITexture[] textures = obj.GetComponentsInChildren<UITexture> ();
		Tweener[] final  = new Tweener[textures.Length];
						for (int i = 0; i < textures.Length; i++) {
								if (textures [i].gameObject.GetComponent<Tweener> () == null) {
								//		Debug.Log ("Added tweener to " + textures [i].name);
										Tweener tweenme = (Tweener)textures [i].gameObject.AddComponent <Tweener>();
										tweenme.mesh = textures [0].gameObject;
										final [i] = tweenme;
								} else {
										final [i] = textures [i].GetComponent<Tweener> ();
								}
						}
						return final;
				

					

	}

	void onInfoBoxRequest(string text, string name,  Vector2 pos, Vector2 mysize, bool clickable){

		Vector2 size;
		if(mysize != null){ size = mysize;} else{size = new Vector2(0.2f, 0.2f);}
	
						
//		name += "infobox";
		GameObject infobox = PlaceInfoBox(name, "InGame", pos.x, pos.y, size.x, size.y);
		GameObject box = infobox.transform.GetChild (0).gameObject;
		GameObject button = PlaceGenericButton ("info_bg", name, "info", box.name, 0, 0, 
		                                        1, 1, true);
		button.GetComponentInChildren<Button> ().parent = infobox;
		

		PlaceGenericText (name + "_info_title", text, box.name, 0, 0,
		                  1, 1, false);


	}

	GameObject PlaceInfoBox(string name, string parent, float x, float y, float sizex, float sizey){
		GameObject infobox = LoadElement("GUI/infobox", "InGame");

		infobox.name = name;
		
		infobox.transform.parent = getState(GameState.InGame);
	//	infobox.transform.localPosition = Vector3.zero;
	//	infobox.transform.localScale = infobox.transform.parent.transform.localScale;
		infobox.transform.localRotation = infobox.transform.parent.transform.localRotation;

		GameObject box = infobox.transform.GetChild (0).gameObject;
		infobox.name = name;
		box.name = name + "_mid";


		Vector3 scale = GUIScale (infobox.transform.parent.transform, sizex, sizey, true);
	//	Debug.Log ("Box scale is " + scale + "\n");
		box.transform.localScale = scale;
		Vector3 mysize = GUISize(scale);
	//	Debug.Log ("Box size is " + mysize + "\n");
		box.transform.localPosition = GUIPosition (infobox.transform.parent.transform,x, y, 0, mysize);


		return infobox;

		}

	public GameObject DisplayToyInfo(string toy){
		float info_width = 0.3f;
		float info_height = 0.2f;
		float title_height = 0.2f;
		float border = 0.05f;
		float content_width = 1f - border;

		float x_zero = -1f + info_width/2f + button_height;
		//float y_zero = -1f + info_height + button_height*2f;
		float y_zero = -1f + info_height;
	//	Debug.Log ("x_zero " + x_zero + " z_zero " + y_zero + " button_height " + button_height + "\n");
		string boxname = "infobox_" + toy;

		GameObject infobox = PlaceInfoBox (boxname, "InGame", x_zero, y_zero, info_width, info_height);
		GameObject box = infobox.transform.GetChild (0).gameObject;

		GameObject button = PlaceGenericButton ("info_bg", toy + "_info_bg", "info", box.name, 0, 0, 
		                                        										1, 1, true);
		button.GetComponentInChildren<Button> ().parent = infobox;


		//title
		string title = Central.Instance.actors[toy].info.title;
		PlaceGenericText (toy + "_info_title", title, box.name, 0, 0.8f,
		                 											 content_width, title_height, false);

		//description
		string content = Central.Instance.actors[toy].info.description;	
		PlaceGenericText (toy + "_info_desc", content, box.name, 0, 0, 
		                  										     content_width, 1f - 2f*title_height - 2f*border, false);

		//extra line
		content = "Points: " + Central.Instance.actors[toy].cost;
		PlaceGenericText (toy + "_info_cost", content, box.name,0, -1f + border+title_height/2f, 
		               											    content_width, title_height, false);
		                  
		return infobox;

	}

	//string what, string parent,float x, float y,float z, float sizex, float sizey){
	void PlaceInGameGUI(){
	//	float fog_height = (2f * camera_size)/(Map.Instance.size_z * Peripheral.Instance.tileSize) ;
		//button_height = 1f - fog_height;
		//button_height = 1f - (2f * camera_size)/(Map.Instance.size_z * Peripheral.Instance.tileSize) ;
		button_height = 0.1f;
		float fog_height = 1f - button_height;


	//	Debug.Log ("fog height is " + fog_height + "\n");
		float text_size = default_text_size *0.8f;
	//	PlaceElement ("GUI/ingame_fog", "InGame", 0, 1, -4f, 1f, 1f, true);
	


		//PlaceGenericText ("ingame_points_text","health", "InGame",-1f,1f, button_height*2f, button_height/2f, false, text_size);
		//PlaceGenericText ("ingame_points_status", Central.Instance.points.ToString(), "InGame",-1f+button_height,1f-button_height, 
	//	                  button_height*2f, button_height/2f, false, text_size);

//		PlaceGenericText ("ingame_time_status", "0000","InGame", 0, 1, button_height*2, button_height/2f,false,text_size);

		//PlaceGenericText ("ingame_dreams", "dreams","InGame", 1f-4f*button_height, 1f, button_height*2f, button_height/2f,false);
		//PlaceGenericText ("ingame_dreams_status", "00","InGame", 1f-4f*button_height, 1f-button_height, button_height*2f, button_height/2f,false, text_size);




		//PlaceElement ("GUI/ingame_quit", "InGame",-1f, 1f,0f,button_height/2f, button_height/2f ,false);
		//PlaceElement ("GUI/ingame_pause", "InGame",-1f, 1f-2*button_height,0f,button_height/2f, button_height/2f ,false);
		//PlaceGenericButton ("fastforward", "FastForward", "InGame", "InGame", -1f, 1f-4*button_height, button_height/2f, button_height/2f, false);

		//GameObject god = PlaceElement ("GUI/Meter/ingame_god_meter", "InGame",1f, 0, 1f, button_height/6f, (1-(2*button_height))/2f, true);
		//Peripheral.Instance.god_meter = god.GetComponent<Meter>();

		PlaceInGameMeters ();
		//Peripheral.Instance.InitEffectMeter (EffectType.God, god);



	//	PlaceElement ("GUI/ingame_inventory", "InGame", .5f, -1f,0f, button_height, button_height,false);


		PlaceInGameButtons ();
		getLabels ();

	}

	GameObject PlaceGenericText(string name, string content, string parent,float x, float y, float sizex, float sizey, bool stretch){
		return PlaceGenericText(name, content, parent,x, y,sizex, sizey,stretch,default_text_size);
	}

	GameObject PlaceGenericText(string name, string content, string parent,float x, float y, float sizex, float sizey, bool stretch, float size){
		GameObject text = PlaceElement ("GUI/generic_text", parent, x, y, 1f, sizex, sizey, stretch,true,content,size);
		Transform mid = text.transform.Find ("generic_text_panel");
		Transform points_label = mid.transform.Find ("generic_text_label");
		points_label.name = name;
		text.name = name;
		points_label.name = name;
		//points_label.GetComponent<UILabel> ().text = content;
		return text;

	}
	public void getLabels()
	{//	Debug.Log ("Getting labels for " + Central.Instance.state + "\n");
		GameObject parent = GameObject.Find (state.ToString());
		labels = parent.GetComponentsInChildren<UILabel>();
		meters = parent.GetComponentsInChildren<Meter>();
		buttons = parent.GetComponentsInChildren<Button> ();

	//	Debug.Log ("Found " + labels.Length + " labels for parent " + parent.name + "\n");

	}


}
