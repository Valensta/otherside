using UnityEngine;
using System.Collections;

public class GodParticle : MonoBehaviour {
	

		
		public Vector3 touchStart;
		public Vector3 touchEnd;
		public float flickTime;
		public float flickLength = 0;
		public float ballVelocity = 0.0f;
		public float ballSpeed = 0f;
		public Vector3 worldAngle;
		bool empty;
		float charge = 0;
		public GameObject ballPrefab;
		float y_offset = 5f;
		Peripheral peripheral;
		private bool GetVelocity = false;
		//public GameObject[] woosh; //no
	//	public AudioClip ballAudio;  //yes
		public float comfortZone = 30f;
		public bool couldBeSwipe;
		public float startCountdownLength = 0.0f;
		public bool startTheTimer = false;
		 bool globalGameStart = false;
		 bool shootEnable = false;
		private float startGameTimer = 0.0f;
	float y_factor = 0f;
	//	private AudioSource asParamsControl;
		
		void  Start ()
		{
	//		asParamsControl = this.gameObject.GetComponentInChildren<AudioSource>();
	//		this.asParamsControl.playOnAwake = false;
	//		this.asParamsControl.loop = false;
			startTheTimer = true;
			Time.timeScale = 1;
			if ( Application.isEditor )
			{
				Time.fixedDeltaTime = 0.01f;
			}
			peripheral = this.GetComponent<Peripheral> ();
		}
		
	/*
	void CouldBeSwipe(float factor){
		couldBeSwipe = true;
		Peripheral.Instance.SubtractEffect (EffectType.God,factor);
		charge += factor;
		//Debug.Log ("Could be swipe for " + factor);
	}
*/
		void Update ()
		{
			if (startTheTimer)
				startGameTimer += Time.deltaTime;

			if (startGameTimer > startCountdownLength)
			{
				globalGameStart = true;
				shootEnable = true;
				startTheTimer = false;
				startGameTimer = 0;		
			}  
			
			if (shootEnable) {
						float time_factor = Time.deltaTime * 5f;
						//if (peripheral.effects.ContainsKey(EffectType.God) && peripheral.effects[EffectType.God].strength > time_factor) {
						//empty = false;
						//	Debug.Log("not empty");
						//}
						//else {
						empty = true;
				//}

				
				if(Input.GetMouseButtonDown (0) && !empty){
					flickTime = Time.time;
					timeIncrease();
					CouldBeSwipe(time_factor);
					GetVelocity = true;
					Vector3 mousePos = Get.MapCoordFromMouseInput(Input.mousePosition);
					mousePos.y = y_offset;
					touchStart= mousePos;
					
				} if(Input.GetAxisRaw("Mouse X") != 0 || Input.GetAxisRaw("Mouse Y") != 0 && !empty){
					Vector3 mousePos = Get.MapCoordFromMouseInput(Input.mousePosition);
					if (Mathf.Abs(mousePos.z - touchStart.z) < comfortZone || Mathf.Abs(mousePos.z - touchStart.z) < comfortZone)
						couldBeSwipe = false;
				//	else
				//	if (peripheral.effects[EffectType.God].strength > Time.deltaTime*Vector3.Distance(mousePos, touchStart) && couldBeSwipe){
				//		CouldBeSwipe(Time.deltaTime * Vector3.Distance(mousePos, touchStart));
				//	}

				} if( Input.GetMouseButtonUp(0)){
					Vector3 mousePos = Get.MapCoordFromMouseInput(Input.mousePosition);
					mousePos.y=y_offset;
					float swipeDist = (mousePos - touchStart).magnitude;
			//	Debug.Log("swipe for  is " + time_factor*swipeDist);
					if (swipeDist > comfortZone && Peripheral.Instance.effects[EffectType.God].strength > time_factor*swipeDist){	
						couldBeSwipe = true;
						CouldBeSwipe(time_factor*swipeDist);
						GetVelocity = false;
						touchEnd = mousePos;
						Vector3 makeme = Vector3.Lerp(touchStart, touchEnd, 0.8f);
						GameObject ball = Instantiate(ballPrefab, makeme, Quaternion.identity) as GameObject;

						GetSpeed();
						GetAngle();
						float mass = ball.GetComponent<Rigidbody>().mass;
						ball.GetComponent<Rigidbody>().AddForce(mass* new Vector3((worldAngle.x * ballSpeed), y_factor*(worldAngle.y * ballSpeed), (worldAngle.z * ballSpeed)));
						couldBeSwipe = false;
					//	Debug.Log("god strength is " + Peripheral.Instance.effects[EffectType.God].strength);
					}else{
				//	Debug.Log ("putting god back\n");

						Peripheral.Instance.AddEffect(EffectType.God,charge);	
						couldBeSwipe = false;
					}
				}//end switch case
				
			}//end shootEnable
			

		}
		
		void timeIncrease()
		{
			if (GetVelocity)
			{
				//flickTime++;
			}
		}
		
		void GetSpeed()
		{
			flickLength = 1.8f;
			if (charge > 0)
			{
		//	Debug.Log("Firing, Charge is " + charge);
				float deltaTime =  charge;
				ballVelocity = charge;
				charge = 0;
			}
			ballSpeed = ballVelocity * 300;
	//	Debug.Log ("ball speed is " + ballSpeed);
			//ballSpeed = ballSpeed - (ballSpeed * 1.65f);
			if (ballSpeed <= -33)
			{
				ballSpeed = -33;
			}
	//	Debug.Log ("speed is " + ballSpeed);
		//	Debug.Log("flick was" + flickTime);
			flickTime = 5;
		}
		
		void GetAngle ()
		{
		worldAngle = -(touchStart - touchEnd);
			//worldAngle = Camera.main.ScreenToWorldPoint(new Vector3 (touchEnd.x, touchEnd.y, ((Camera.main.nearClipPlane - 100.0f)*1.8f)));
		}
		//no
		//  void PlayWhoosh()
		//  {
		//      GameObject sound = Instantiate(whoosh[Random.Range(0,whoosh.length)],transform.position,transform.rotation) as GameObject;
		//      Debug.Log("Whoosh!");
		//  }
	}

