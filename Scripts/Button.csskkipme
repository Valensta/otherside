using UnityEngine;
using System.Collections;
using System.Collections.Generic;
//using UnityEditor;


public class Button : MonoBehaviour {
	public string type = "";
	public string content = "";
	public int order = 0;
	float holdingStartTime = 0;
	UIButton uibutton = null;
	public bool holding = false;
	bool selected = false;
	Color initial_color;
	public GameObject parent;
	public Tweener tweener;
	public bool enabled;
	public Peripheral peripheral;
	public delegate void ButtonClickedHandler(string type, string content);
	public static event ButtonClickedHandler onButtonClicked; 
	

	void Start(){
		Peripheral.onCreatePeripheral += onCreatePeripheral;
		if (GameObject.Find ("Peripheral") != null) {
		//	Debug.Log("Button found peripheral\n");
						peripheral = GameObject.Find ("Peripheral").GetComponent<Peripheral> ();//THIS IS NOT GOOD
				}
		uibutton = gameObject.GetComponent<UIButton> ();
		initial_color = GetComponentInChildren<UITexture> ().color;
		enabled = true;
	}

	void onCreatePeripheral(Peripheral p){
	//	Debug.Log ("peripheral initiated in button");
		peripheral = p;
	}

	/*
	void OnHover(bool isOver){
		
		if (type == "toy_selected") {	
			if (isOver)
				Eyes.Instance.DisplayInfo("toy",content);
			else
				Eyes.Instance.ClearInfo();
		}
	}*/


	public void setEnabled(bool enable){
		Debug.Log (this.name + " is now enabled " + enable);
		enabled = enable;
		if (tweener == null)
						return;
		if (!enabled) {
			if (peripheral.getSelectedToy() == content){ peripheral.SelectToy(null);}

		//	Debug.Log("Disabling " + parent.name);
			tweener.TweenMe (Tweener.TweenType.ColorChange, Tweener.TweenColor.Disabled.ToString ());
				} else {
						tweener.StopMe();
				}
	}
				
	public void setSelected(bool selected){
		if (selected) {
			selected = true;
			EagleEyes.Instance.DisplayInfo ("toy", content);
			GameObject tweenme = GetComponentInChildren<UITexture> ().gameObject;
			peripheral.SelectToy (content);
			tweener.TweenMe (Tweener.TweenType.ColorLoop, Tweener.TweenColor.Select.ToString ());
			Central.Instance.button_selected = tweenme;
		} else {
		//	Debug.Log (this.name + " is now selected " + selected);
			tweener.StopMe ();		
			EagleEyes.Instance.ClearInfo ();
			selected = false;
		}
	}

	void Update(){
		if (holding) {
			Debug.Log(this.name + " is holding\n");
			EffectType etype = Get.EffectFromString (content);
			float holdingTime = Mathf.Min (10*Time.deltaTime, peripheral.effects [etype].strength);

			Central.Instance.AddCharge(holdingTime);
			peripheral.SubtractEffect (etype, holdingTime);
		}



	}
	/*
	void OnPress(bool isDown){

		Debug.Log ("Pressed " + name + " " + content + "\n");

		if (type != "meter_selected") {return;}
		if (parent.GetComponent<Meter>().GetCharged()){return;}

		if (isDown == true) {
			Effect charge = Central.Instance.GetCharge();
						holdingStartTime = Time.time;	
						holding = true;
						EffectType etype = Get.EffectFromString (content);
						if(charge != null && charge.type != etype){
							//Debug.Log("put it back\n");
							peripheral.AddEffect(charge.type,charge.strength);
							peripheral.meters[charge.type].GetComponent<Meter>().SetCharged(false);
						}


						Central.Instance.SetCharge(new Effect (etype, 0));
				} else {
						if (holding && parent != null){
							parent.GetComponent<Meter>().SetCharged(true);
						}
						holding = false;
				}
	}
*/




	void OnClick(){
		Debug.Log ("button on click " + this.name + "\n");
		if (!enabled)
		return;


		Debug.Log (this.name + " is not selected\n");
		if (type == "toy_selected" && selected) {
			Debug.Log("already selected, unselecting\n");
			setSelected(false);
		} else if (type == "toy_selected") {
			Debug.Log("Selected " + this.name);
			setSelected(true);
		}


		if (type == "info") {
			Destroy (parent);
		}



		if (type == "InGame") {


			if (content == "StartWave"){
				peripheral.make_wave = true;
				peripheral.next_monster_time = peripheral.TIME;
				Destroy(gameObject);
			}


			if (content == "Pause"){
				peripheral.Pause();
				EagleEyes.Instance.PlaceMenu(true);
			}

			if (content == "FastForward"){
				peripheral.ChangeTime();
			}
		}
		if (type == "Inventory") {
			if (content == "StartGame"){
				if (Central.Instance.points > 0){
					EagleEyes.Instance.PlaceSignal("GUI/Signal/ingame_stop_signal", Input.mousePosition);
				}else{
					Central.Instance.changeState(GameState.InGame);
				}
			
			}else{
				if (Central.Instance.points > 0){
					Inventory.Instance.Add(content, 1);

					EagleEyes.Instance.UpdateInventory();
				}
			}

		}
		if (type == "MainMenu") {
			if (content == "Continue"){
				peripheral.Play();
				EagleEyes.Instance.PlaceMenu(false);
			}

			if (content == "Inventory"){
				Central.Instance.changeState(GameState.Inventory);
			}
			if (content == "Quit") {
				Debug.Log("I wanna quit");
				Application.Quit();
			}
			if (content == "ToMainMenu") {
				Central.Instance.changeState(GameState.MainMenu);
			}
			if (content == "StartGame"){
				/*
					Central.Instance.points = Inventory.Instance.ResetLevel ();


				*/
				Debug.Log("Button placemenu false");
				
				EagleEyes.Instance.PlaceMenu(false);
				Debug.Log("Button change state to ingame");
				Central.Instance.changeState(GameState.InGame);
				//Central.Instance.changeState("Lost");
				
			}
		}
		if (onButtonClicked != null) {
						onButtonClicked (type, content);
				}

	}

}