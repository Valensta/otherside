using UnityEngine;
using System.Collections;
using System.Collections.Generic;



public class Inventory : MonoBehaviour {


//	public Dictionary<string,actorStats> list = new Dictionary<string, actorStats>();

	public static Inventory instance;
	public Dictionary<string,int> count = new Dictionary<string, int>();   //total allowed
	public Dictionary<string,int> previous_count = new Dictionary<string, int>(); 
	public Dictionary<string,int> inuse = new Dictionary<string, int>();   //how many have been used for this level
	public string unit_selected = "";
	public static Inventory Instance { get; private set; }


	void Awake()
	{//Debug.Log ("Inventory awake");
		if (Instance != null && Instance != this) {
			//	Debug.Log ("Inventory got destroyeed");
			Destroy (gameObject);
		}
		Instance = this;


		foreach (KeyValuePair<string,actorStats> kvp in Central.Instance.actors) {
	//		if (kvp.Value.team == "Player"){

				count.Add(kvp.Key,9999);

				Add (kvp.Key, 0);
				inuse.Add(kvp.Key,0);
				//Debug.Log("Inventory is adding " + kvp.Key + "\n");
		//	}
		}
		SaveProgress ();

	}



	public int getCount(string unit){
		int i = -1;
		count.TryGetValue (unit, out i);
		return i;
	}

//Add to current count
	public void Add(string unit, int i){
//		Debug.Log ("Adding " + unit + " (" + i + ") to inventory\n");
		Central.Instance.points -= i;
		int t = 0;
		if (count.TryGetValue (unit, out t)) {
			count [unit] = t + i;
		} else {
			count.Add(unit,i);
		}

	}

//ie move on to next level
	public void SaveProgress () {
		foreach (KeyValuePair<string,int> kvp in count) {
			previous_count[kvp.Key] = kvp.Value;
		}
	}
	
	public int ResetLevel(){
		Debug.Log("resetting level\n");
		int points = 0;


		string[] keys = new string[inuse.Keys.Count];
		inuse.Keys.CopyTo(keys, 0);

		foreach (string key in keys) {

			points += inuse[key];
			count[key] = previous_count[key];
			inuse[key] = 0;
		}

		return points;
	}

//Set count based on prevoius level
	public void Set(string unit, int i){
	//	Debug.Log ("Setting " + unit + " (" + i + ") in inventory\n");
		int t = 0;
		if (previous_count.TryGetValue (unit, out t)) {
			count [unit] = t + i;		
		} else {
			count[unit] = i;
		}

	}


	public bool useUnit(string name)
	{//Debug.Log ("using unit " + name + "\n");
		string iseffect;
		EffectType type = Get.EffectFromString (name);
		Central.Instance.effect_toys.TryGetValue(type, out iseffect);
	//	Debug.Log ("ISEFFECT " + iseffect);
		if (iseffect != null){
	//		Debug.Log("using " +type+ "\n");
			Peripheral.Instance.meters[Get.EffectFromString(name)].GetComponent<Meter>().SetCharged(false);
			if (Peripheral.Instance.effects [type].strength < 0.05){
				Peripheral.Instance.meters[Get.EffectFromString(name)].SetActive(false);
			}

			return true;}

		if (count [name] > 0) {
			count [name]--;
			inuse[name]++;
			Central.Instance.points -= Central.Instance.actors[name].cost;
			if (count[name] == 0){
					//Eyes.Instance.ClearRowButton (name, "toy_select", "ingame_toy_select_button");
				EagleEyes.Instance.SetRowButton (name, "toy_select", false, false);
				Central.Instance.button_selected = null;
			}
			return true;
		} else {
			return false;
		}
			    

	}

	public bool haveUnit(string name)
	{//Debug.Log ("using unit " + name + "\n");
		string iseffect;
		Central.Instance.effect_toys.TryGetValue(Get.EffectFromString(name), out iseffect);
		//	Debug.Log ("ISEFFECT " + iseffect);
		if (iseffect != null){ return true;}
		
		if (count [name] > 0) {
			return true;
		} else {
			return false;
		}
		
	}

}//end of class

